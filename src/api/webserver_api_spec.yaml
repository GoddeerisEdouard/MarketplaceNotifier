openapi: 3.0.0
info:
  title: Marketplace Notifier API
  version: 1.1.0
  description: API for managing marketplace queries (add, remove, get). Check out the examples.
servers:
  - url: http://localhost:5000
paths:
  /query/add_link:
    post:
      summary: Create a new search query from a 2dehands.be browser URL
      description: >
        Accepts a full browser URL from 2dehands.be and parses it to extract query parameters.
        The parsed query is stored in the database. No actual search is performed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                browser_url:
                  type: string
                  format: uri
                  description: A full browser URL copied from a 2dehands.be search
              required:
                - browser_url
            examples:
              SimpleQuery:
                summary: Basic query without category
                value:
                  browser_url: "https://www.2dehands.be/q/iphone+15+pro/#sortBy:SORT_INDEX|sortOrder:DECREASING"
              CategoryQuery:
                summary: Query with category filter
                value:
                  browser_url: "https://www.2dehands.be/l/games-en-spelcomputers/#q:ps5|Language:all-languages|sortBy:SORT_INDEX|sortOrder:DECREASING"
              WithPostcode:
                summary: Query with postcode and distance
                value:
                  browser_url: "https://www.2dehands.be/q/fiets/#postcode:2000|distanceMeters:5000|sortBy:SORT_INDEX|sortOrder:DECREASING"
              SubcategoryQuery:
                summary: Query with L1 and L2 categories
                value:
                  browser_url: "https://www.2dehands.be/l/auto-onderdelen/banden/#q:michelin|sortBy:SORT_INDEX|sortOrder:DECREASING"
      responses:
        '200':
          description: Successfully parsed and stored query
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  request_url:
                    type: string
                  marketplace:
                    type: string
                  query:
                    type: string
              examples:
                SimpleQuery:
                  summary: response example of simple query
                  description: ! notice that the query's value is in human readable format
                  value:
                    id: 0
                    marketplace: "TWEEDEHANDS"
                    query: "iphone 15 pro"
                    browser_query_url: "https://www.2dehands.be/q/iphone+15+pro/#sortBy:SORT_INDEX|sortOrder:DECREASING"
                    request_url: "https://www.2dehands.be/lrp/api/search?attributesByKey[]=Language%3Aall-languages&attributesByKey[]=offeredSince%3AGisteren&limit=30&offset=0&query=iphone+15+pro&searchInTitleAndDescription=true&sortBy=SORT_INDEX&sortOrder=DECREASING&viewOptions=list-view"
        '500':
          description: Query already exists or unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                already_exists:
                    summary: Query already exists
                    value:
                      error: Query already exists
                unexpected_error:
                    summary: Unexpected error
                    value:
                      error: "Unexpected error occurred"
                      reason: "str(e)"
                      trace: "python traceback"
  /query:
    get:
      summary: Get all queries
      responses:
        '200':
          description: A list of queries
          content:
            application/json:
              schema:
                type: object
                properties:
                  queries:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        request_url:
                          type: string
                        marketplace:
                          type: string
                        query:
                          type: string
  /query/{query_info_id}:
    get:
      summary: Get a query by ID
      parameters:
        - in: path
          name: query_info_id
          schema:
            type: integer
          required: true
          description: The ID of the query
      responses:
        '200':
          description: Query details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  query:
                    type: string
                  request_query_url:
                    type: string
                  marketplace:
                    type: string
        '400':
          description: Invalid query info ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Invalid query_info_id
        '404':
          description: Query not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Not Found
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Unexpected error occurred"
                reason: "str(e)"
                traceback: "python traceback"
    delete:
      summary: Delete a query by ID
      parameters:
        - in: path
          name: query_info_id
          schema:
            type: integer
          required: true
          description: The ID of the query
      responses:
        '200':
          description: Query deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Query deleted
        '404':
          description: Query not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Not Found
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Unexpected error occurred"
                reason: "str(e)"
                traceback: "python traceback"
  /ping:
    get:
      summary: Ping the server
      responses:
        '200':
          description: Server is alive
          content:
            text/plain:
              schema:
                type: string
                example: pong